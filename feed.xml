<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://yuxuani.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://yuxuani.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-10-05T20:49:22+00:00</updated><id>https://yuxuani.github.io/feed.xml</id><title type="html">blank</title><subtitle>This is Yuxuan&apos;s homepage. </subtitle><entry><title type="html">Data Profiling: pandas, YData-Profiling, or YData-SDK?</title><link href="https://yuxuani.github.io/blog/2025/data-profiling-tools/" rel="alternate" type="text/html" title="Data Profiling: pandas, YData-Profiling, or YData-SDK?"/><published>2025-10-05T00:00:00+00:00</published><updated>2025-10-05T00:00:00+00:00</updated><id>https://yuxuani.github.io/blog/2025/data-profiling-tools</id><content type="html" xml:base="https://yuxuani.github.io/blog/2025/data-profiling-tools/"><![CDATA[<p>When working on the <strong>prepare phase</strong> of a data science or machine learning project, one of the most important steps is <strong>checking data quality and integrity</strong>. The tools you choose can make this process either a smooth, insightful experience or a time-consuming exercise.</p> <p>In the Python ecosystem, three common options stand out: <code class="language-plaintext highlighter-rouge">pandas</code>, <code class="language-plaintext highlighter-rouge">ydata-profiling</code>(previously <code class="language-plaintext highlighter-rouge">pandas-profiling</code>), and <code class="language-plaintext highlighter-rouge">ydata-sdk</code>. While they overlap in some areas, each serves a distinct purpose. Knowing when to use which can save you both time and effort.</p> <hr/> <h2 id="1-pandas-the-developers-swiss-army-knife">1. Pandas: The Developer’s Swiss Army Knife</h2> <p><strong>Best for:</strong> Quick, lightweight, programmatic checks. Pandas is the backbone of Python data manipulation. With just a few lines, you can inspect your dataset for <strong>missing values, duplicates, and basic statistics</strong>.</p> <p><strong>Example checks with Pandas:</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">data.csv</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="nf">isnull</span><span class="p">().</span><span class="nf">sum</span><span class="p">())</span>        <span class="c1"># missing values per column
</span><span class="nf">print</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="nf">duplicated</span><span class="p">().</span><span class="nf">sum</span><span class="p">())</span>    <span class="c1"># duplicate rows
</span><span class="nf">print</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="nf">describe</span><span class="p">())</span>            <span class="c1"># summary stats
</span></code></pre></div></div> <ul> <li> <p>✅ Advantages:</p> <ul> <li>No extra dependencies.</li> <li>Highly flexible, scriptable, and customizable.</li> <li>Great for <strong>inline checks inside data pipelines</strong>.</li> </ul> </li> <li> <p>⚠️ Limitations:</p> <ul> <li>No visual reports.</li> <li>More manual work to scale across <strong>many tables</strong>.</li> <li>Harder to spot <strong>correlations or distributions</strong> without extra plotting code.</li> </ul> </li> </ul> <hr/> <h2 id="2-ydata-profiling-instant-exploratory-insights">2. YData-Profiling: Instant Exploratory Insights</h2> <p><strong>Best for:</strong> Single-table exploration and reporting.</p> <p><code class="language-plaintext highlighter-rouge">ydata-profiling</code> (previously known as <code class="language-plaintext highlighter-rouge">pandas-profiling</code>) automatically generates a <strong>detailed EDA report</strong> for a dataset. In minutes, you get distributions, correlations, missing values, duplicates, and variable types—beautifully summarized in an <strong>interactive HTML report</strong>.</p> <p><strong>Example:</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">ydata_profiling</span> <span class="kn">import</span> <span class="n">ProfileReport</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">data.csv</span><span class="sh">"</span><span class="p">)</span>
<span class="n">profile</span> <span class="o">=</span> <span class="nc">ProfileReport</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">Data Report</span><span class="sh">"</span><span class="p">)</span>
<span class="n">profile</span><span class="p">.</span><span class="nf">to_file</span><span class="p">(</span><span class="sh">"</span><span class="s">report.html</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <ul> <li> <p>✅ Advantages:</p> <ul> <li>Rich <strong>visual exploration</strong> with no extra coding.</li> <li>Perfect for <strong>one-off analyses</strong> or sharing insights with stakeholders.</li> <li>Helps detect <strong>data quality issues quickly</strong>.</li> </ul> </li> <li> <p>⚠️ Limitations:</p> <ul> <li>Not ideal for automation.</li> <li>Typically works best on <strong>one table at a time</strong>.</li> <li>Can be slow on very large datasets.</li> </ul> </li> </ul> <hr/> <h2 id="3-ydata-sdk-scaling-integrity-checks-and-beyond">3. YData-SDK: Scaling Integrity Checks and Beyond</h2> <p><strong>Best for:</strong> Multi-table, relational, and automated validation pipelines.</p> <p><code class="language-plaintext highlighter-rouge">ydata-sdk</code> is a broader toolkit that goes beyond profiling. While it is well-known for <strong>synthetic data generation</strong>, it also shines in <strong>data validation and preparation</strong>. Unlike <code class="language-plaintext highlighter-rouge">ydata-profiling</code>, it’s fully programmatic and scales to <strong>multiple or relational tables</strong>.</p> <p><strong>Example use cases:</strong></p> <ul> <li>Validate <strong>foreign key integrity</strong> across relational tables.</li> <li>Automate integrity checks inside <strong>production pipelines</strong>.</li> <li>Programmatically enforce constraints like <strong>data types, ranges, and uniqueness</strong>.</li> </ul> <p>Even if you don’t use synthetic data, <code class="language-plaintext highlighter-rouge">ydata-sdk</code> is valuable for teams that need <strong>reliable, repeatable validation</strong> across large or complex datasets.</p> <ul> <li> <p>✅ Advantages:</p> <ul> <li>Works with <strong>multiple or relational datasets</strong>.</li> <li>Fits naturally into <strong>automated ETL/ML workflows</strong>.</li> <li>More powerful than Pandas for <strong>structured validation</strong>.</li> </ul> </li> <li> <p>⚠️ Limitations:</p> <ul> <li>More complex setup than <code class="language-plaintext highlighter-rouge">pandas</code> or <code class="language-plaintext highlighter-rouge">ydata-profiling</code>.</li> <li>Overkill for simple, single-table datasets.</li> </ul> </li> </ul> <hr/> <h2 id="quick-decision-guide">Quick Decision Guide</h2> <table> <thead> <tr> <th>Scenario</th> <th>Recommended Tool</th> </tr> </thead> <tbody> <tr> <td>Single table, quick inline checks</td> <td><strong>Pandas</strong></td> </tr> <tr> <td>Single table, need detailed EDA report</td> <td><strong>YData-Profiling</strong></td> </tr> <tr> <td>Multiple tables, non-relational</td> <td><strong>Loop with Pandas</strong> or YData-Profiling</td> </tr> <tr> <td>Relational tables with FK integrity checks</td> <td><strong>YData-SDK</strong></td> </tr> <tr> <td>Automated pipeline validation</td> <td><strong>YData-SDK</strong> + Pandas</td> </tr> </tbody> </table> <p><br/></p> <h5 style="text-align: center;">Data Profiling Decision Flow</h5> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                                    How many tables?
                                          │
                          ┌───────────────┴───────────────┐
                          │                               │
                       One table                     Multiple / Relational
                          │                               │
                     ┌────┴─────┐                   ┌─────┴────────┐
                     │          │                   │              │
                    Quick    Detailed            Simple loops   Relational /
                    checks   EDA                  (Pandas       automated validation
                   (Pandas) (YData-Profiling)    /Profiling)   (YData-SDK)
</code></pre></div></div> <hr/> <h2 id="conclusion">Conclusion</h2> <ul> <li>Use <strong>Pandas</strong> when you want lightweight, custom checks directly in your code.</li> <li>Use <strong>YData-Profiling</strong> when you need a comprehensive, visual, one-off report for a dataset.</li> <li>Use <strong>YData-SDK</strong> when you’re working with <strong>multiple or relational tables</strong>, or when you need <strong>repeatable, automated data validation</strong> in production.</li> </ul> <p>Think of it this way:</p> <ul> <li><strong>Pandas</strong> is your <strong>daily driver</strong>.</li> <li><strong>YData-Profiling</strong> is your <strong>magnifying glass</strong>.</li> <li><strong>YData-SDK</strong> is your <strong>data quality gatekeeper</strong> for scaling and automation.</li> </ul> <p>Choosing the right one depends less on “which is better” and more on <strong>what phase of your project you’re in</strong> and <strong>how complex your data landscape is</strong>.</p>]]></content><author><name></name></author><category term="data science"/><category term="data"/><category term="profiling"/><category term="EDA"/><summary type="html"><![CDATA[“A quick look at the strengths and limitations of pandas, YData-Profiling, and YData-SDK for data profiling.”]]></summary></entry><entry><title type="html">Complete SSH Guide for Beginners: Generating, Naming and Mananing SSH Keys.</title><link href="https://yuxuani.github.io/blog/2025/ssh-key-beginner-guide/" rel="alternate" type="text/html" title="Complete SSH Guide for Beginners: Generating, Naming and Mananing SSH Keys."/><published>2025-05-25T00:00:00+00:00</published><updated>2025-05-25T00:00:00+00:00</updated><id>https://yuxuani.github.io/blog/2025/ssh-key-beginner-guide</id><content type="html" xml:base="https://yuxuani.github.io/blog/2025/ssh-key-beginner-guide/"><![CDATA[<h2 id="1-what-is-an-ssh-key">1. What is an SSH Key?</h2> <p>An SSH key is a pair of encrypted keys (public and private) used for secure remote login and authentication. Compared to passwords, SSH keys are more secure and easier to automate.</p> <hr/> <h2 id="2-how-to-generate-an-ssh-key">2. How to Generate an SSH Key?</h2> <p>Here’s how to generate the recommended key type <code class="language-plaintext highlighter-rouge">ed25519</code>, which works on most systems (Windows, macOS, Linux).</p> <p>Open your terminal or command prompt and run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-C</span> <span class="s2">"example@example.com"</span> <span class="nt">-f</span> ~/.ssh/id_ed25519_example
</code></pre></div></div> <p>Explanation:</p> <ul> <li><code class="language-plaintext highlighter-rouge">-t ed25519</code>: specifies the ed25519 key type</li> <li><code class="language-plaintext highlighter-rouge">-C</code>: adds a comment to help identify the key (e.g., email, name, or any text)</li> <li><code class="language-plaintext highlighter-rouge">-f</code>: sets the file name to avoid overwriting default keys</li> </ul> <p>Follow the prompts and optionally set a passphrase. Two files will be created:</p> <ul> <li>Private key: <code class="language-plaintext highlighter-rouge">id_ed25519_example</code> — keep this safe and never share</li> <li>Public key: <code class="language-plaintext highlighter-rouge">id_ed25519_example.pub</code> — can be shared and added to servers or platforms like GitHub</li> </ul> <hr/> <h2 id="3-how-to-view-and-copy-your-public-key">3. How to View and Copy Your Public Key?</h2> <p>Your public key is in the <code class="language-plaintext highlighter-rouge">.pub</code> file. Use this command to display it:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> ~/.ssh/id_ed25519_example.pub
</code></pre></div></div> <p>Copy the entire output and paste it where your public key is needed, for example, in GitHub under SSH keys.</p> <p>Note: There are also other ways to view the ssh keys</p> <ul> <li>with scrolling <code class="language-plaintext highlighter-rouge">less ~/.ssh/id_ed25519_example.pub</code></li> <li>using text editor <code class="language-plaintext highlighter-rouge">vim ~/.ssh/id_ed25519_example.pub</code> or <code class="language-plaintext highlighter-rouge">code ~/.ssh/id_ed25519_example.pub</code></li> <li>or open the file manually <ul> <li>Windows: <code class="language-plaintext highlighter-rouge">C:\Users\&lt;YourUsername&gt;\.ssh\</code></li> <li>macOS/Linux: <code class="language-plaintext highlighter-rouge">~/.ssh/</code></li> </ul> </li> </ul> <hr/> <h2 id="4-adding-ssh-key-to-github">4. Adding SSH Key to GitHub</h2> <ol> <li>Log in to your GitHub account.</li> <li>Click your profile photo (top-right) → <strong>Settings</strong>.</li> <li>In the left menu, select <strong>SSH and GPG keys</strong>.</li> <li>Click the green <strong>New SSH key</strong> or <strong>Add SSH key</strong> button.</li> <li>Enter a descriptive title (e.g., “Laptop key” or “Work PC”).</li> <li>Paste your copied public key into the <strong>Key</strong> field.</li> <li>Click <strong>Add SSH key</strong> to save.</li> </ol> <p>Now you can interact with GitHub via SSH without typing your password.</p> <hr/> <h2 id="5-how-to-specify-the-ssh-key-filename">5. How to Specify the SSH Key Filename?</h2> <p>When generating a key, you can use the <code class="language-plaintext highlighter-rouge">-f</code> option to set a custom filename, for example:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-C</span> <span class="s2">"example@example.com"</span> <span class="nt">-f</span> ~/.ssh/id_ed25519_work
</code></pre></div></div> <p>This creates <code class="language-plaintext highlighter-rouge">id_ed25519_work</code> and <code class="language-plaintext highlighter-rouge">id_ed25519_work.pub</code>, making it easier to manage multiple keys.</p> <hr/> <h2 id="6-managing-multiple-ssh-keys-and-accounts-eg-github--servers">6. Managing Multiple SSH Keys and Accounts (e.g. GitHub &amp; Servers)</h2> <p>If you have multiple GitHub accounts or different servers, manage them via the SSH config file <code class="language-plaintext highlighter-rouge">~/.ssh/config</code>.</p> <p>Suppose you have three keys:</p> <ul> <li><code class="language-plaintext highlighter-rouge">~/.ssh/id_ed25519_personal</code> — personal GitHub</li> <li><code class="language-plaintext highlighter-rouge">~/.ssh/id_ed25519_work</code> — work GitHub</li> <li><code class="language-plaintext highlighter-rouge">~/.ssh/id_ed25519_server</code> — remote server</li> </ul> <p>Create or edit <code class="language-plaintext highlighter-rouge">~/.ssh/config</code> and add:</p> <pre><code class="language-ssh-config"># Personal GitHub account
Host github-personal
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_ed25519_personal

# Work GitHub account
Host github-work
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_ed25519_work

# Remote Server
Host my-server
  HostName your.server.com
  User yourusername
  IdentityFile ~/.ssh/id_ed25519_server
</code></pre> <p>Usage examples:</p> <ul> <li> <p>For personal GitHub repo:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git@github-personal:username/repo.git
</code></pre></div> </div> </li> <li> <p>For work GitHub repo:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git@github-work:username/repo.git
</code></pre></div> </div> </li> <li> <p>SSH login to server:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh my-server
</code></pre></div> </div> </li> </ul> <p>This lets you use different keys for different accounts and servers without confusion.</p> <hr/> <p>Summary</p> <p>This guide covers all the essentials for working with SSH keys, including:</p> <ul> <li>What SSH keys are and why they are better than passwords</li> <li>How to generate secure ed25519 SSH keys with custom filenames</li> <li>How to view and copy your public key for use on GitHub and servers</li> <li>How to add your SSH public key to GitHub for passwordless access</li> <li>How to manage multiple SSH keys and accounts using the SSH config file</li> <li>Tips for naming keys and organizing multiple server connections</li> </ul> <p>By following this guide, you will be able to confidently generate, name, and manage multiple SSH keys across different GitHub accounts and servers, improving your workflow security and convenience.</p> <p>If you have any questions or want to share your experience, feel free to leave a comment below. Let’s learn together! ：）</p>]]></content><author><name></name></author><category term="Version Control"/><category term="git"/><category term="github"/><category term="ssh"/><summary type="html"><![CDATA[“Everything you need to know about generating, naming, and managing SSH keys.”]]></summary></entry><entry><title type="html">How to Use Multiple GitHub Accounts with Different SSH Keys</title><link href="https://yuxuani.github.io/blog/2025/multiple-ssh-keys/" rel="alternate" type="text/html" title="How to Use Multiple GitHub Accounts with Different SSH Keys"/><published>2025-05-03T00:00:00+00:00</published><updated>2025-05-03T00:00:00+00:00</updated><id>https://yuxuani.github.io/blog/2025/multiple-ssh-keys</id><content type="html" xml:base="https://yuxuani.github.io/blog/2025/multiple-ssh-keys/"><![CDATA[<p style="color: #5B9BD5; font-style: italic;"> Note: If you’re new to SSH, please check out my latest post <a href="../ssh-key-beginner-guide" style="color: #6A5ACD; font-style: italic;"> Complete SSH Key Beginner’s Guide </a>, which is more beginner-friendly and comprehensive. This article has more detailed information for those interested in specifics. </p> <p>If you’re working with multiple GitHub accounts, you might want to keep your credentials separate for each account. This tutorial will show you how to use different SSH keys for two GitHub accounts (<code class="language-plaintext highlighter-rouge">account1</code> and <code class="language-plaintext highlighter-rouge">account2</code>) on the same machine.</p> <h2 id="️-step-1-generate-ssh-keys-for-both-accounts">🛠️ Step 1: Generate SSH Keys for Both Accounts</h2> <p>First, generate SSH keys for each account. If you already have one key for <code class="language-plaintext highlighter-rouge">account1</code>, you’ll generate a separate key for <code class="language-plaintext highlighter-rouge">account2</code>.</p> <p><strong>Generate Key for Account 1:</strong>（If you haven’t done so already） For <code class="language-plaintext highlighter-rouge">account1</code>, generate an SSH key:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-C</span> <span class="s2">"your_email2@example.com"</span> <span class="nt">-f</span> ~/.ssh/id_ed25519_account1
</code></pre></div></div> <p>Note:</p> <ul> <li><code class="language-plaintext highlighter-rouge">ssh-keygen</code> is used to generate an SSH key pair.</li> <li><code class="language-plaintext highlighter-rouge">-t ed25519</code>: Uses the <code class="language-plaintext highlighter-rouge">ed25519</code> algorithm, which is faster and more secure than <code class="language-plaintext highlighter-rouge">rsa</code>.</li> <li><code class="language-plaintext highlighter-rouge">-C "your_email1@example.com"</code>: Adds a comment (e.g. your email) for identification purposes.</li> <li><code class="language-plaintext highlighter-rouge">-f ~/.ssh/id_rsa_account1</code>: Specifies the file where the private key will be saved.</li> </ul> <p><strong>Generate Key for Account 2:</strong><br/> Similarly, generate a separate SSH key for <code class="language-plaintext highlighter-rouge">account2</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-C</span> <span class="s2">"your_email2@example.com"</span> <span class="nt">-f</span> ~/.ssh/id_ed25519_account1
</code></pre></div></div> <p>After creating these keys, make sure to add their corresponding public keys (id_rsa_account1.pub and id_rsa_account2.pub) to the respective GitHub account’s SSH settings.</p> <p><strong>Add to GitHub</strong><br/> After generating the keys, open each public key file (<code class="language-plaintext highlighter-rouge">id_ed25519_account1.pub</code> and <code class="language-plaintext highlighter-rouge">id_ed25519_account2.pub</code>) in a text editor, <strong>copy the full contents</strong>, and <strong>paste</strong> it into the corresponding GitHub account’s <strong>SSH keys settings</strong> under:</p> <blockquote> <p>GitHub → Settings → SSH and GPG Keys → New SSH key</p> </blockquote> <h2 id="️-step-2-configure-ssh-config-file">⚙️ Step 2: Configure SSH config File</h2> <p>Next, we’ll configure the SSH settings to ensure that each account uses the correct key.</p> <p>Open your terminal and edit the SSH config file:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano ~/.ssh/config
</code></pre></div></div> <p>Add the following configuration:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Account 1 - Default GitHub account
Host github.com
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa_account1
  IdentitiesOnly yes

# Account 2 - Second GitHub account
Host github-account2
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa_account2
  IdentitiesOnly yes
</code></pre></div></div> <p>Here:</p> <p><code class="language-plaintext highlighter-rouge">github.com</code> is for <code class="language-plaintext highlighter-rouge">account1</code> (default GitHub account).</p> <p><code class="language-plaintext highlighter-rouge">github-account2</code> is a custom alias for <code class="language-plaintext highlighter-rouge">account2</code>. This ensures the right SSH key is used.</p> <h2 id="-step-3-clone-repositories-using-the-correct-account">🧑‍💻 Step 3: Clone Repositories Using the Correct Account</h2> <p>When cloning a repository, make sure you use the correct alias for the second account.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Clone with Account 1 (default):</span>
git clone git@github.com:account1/repo-name.git
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Clone with Account 2:</span>
git clone git@github-account2:account2/repo-name.git
</code></pre></div></div> <p>Note: Use <code class="language-plaintext highlighter-rouge">github-account2</code> as the host to ensure that <code class="language-plaintext highlighter-rouge">account2</code>’s SSH key (<code class="language-plaintext highlighter-rouge">id_rsa_account2</code>) is used.</p> <h2 id="-step-4-set-git-configuration-for-each-repository-optional">📝 Step 4: Set Git Configuration for Each Repository (Optional)</h2> <p>To make sure you’re committing with the correct user for each project, set the <code class="language-plaintext highlighter-rouge">user.name</code> and <code class="language-plaintext highlighter-rouge">user.email</code> for each repo.</p> <p>For Account 1:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config user.name <span class="s2">"account1"</span>
git config user.email <span class="s2">"your_email1@example.com"</span>
</code></pre></div></div> <p>For Account 2:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config user.name <span class="s2">"account2"</span>
git config user.email <span class="s2">"your_email2@example.com"</span>
</code></pre></div></div> <h2 id="-step-5-test-which-ssh-key-is-in-use-optional">✅ Step 5: Test Which SSH Key Is in Use (Optional)</h2> <p>To check which SSH key is being used:</p> <p>For Acount 1:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-T</span> git@github.com
<span class="c"># You should see:</span>
<span class="c"># Hi account1! You've successfully authenticated...</span>
</code></pre></div></div> <p>For Acount 2:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-T</span> git@github-account2
<span class="c"># You should see:</span>
<span class="c"># Hi account2! You've successfully authenticated...</span>
</code></pre></div></div> <p>This confirms the correct SSH key is in use.</p> <h2 id="-conclusion">🌟 Conclusion</h2> <p>You now have separate SSH keys configured for two GitHub accounts. By using different aliases in the SSH configuration, you can easily manage multiple GitHub accounts on the same machine. Always remember to use the correct SSH alias when cloning repositories and pushing changes!</p>]]></content><author><name></name></author><category term="Version Control"/><category term="git"/><category term="github"/><category term="ssh"/><summary type="html"><![CDATA[Streamline your workflow with distinct SSH configurations]]></summary></entry><entry><title type="html">Fixing Jekyll Service Not Accessible Inside Docker Container</title><link href="https://yuxuani.github.io/blog/2025/fix-jekyll-service-docker/" rel="alternate" type="text/html" title="Fixing Jekyll Service Not Accessible Inside Docker Container"/><published>2025-04-15T00:00:00+00:00</published><updated>2025-04-15T00:00:00+00:00</updated><id>https://yuxuani.github.io/blog/2025/fix-jekyll-service-docker</id><content type="html" xml:base="https://yuxuani.github.io/blog/2025/fix-jekyll-service-docker/"><![CDATA[<p>While setting up a blog using the <code class="language-plaintext highlighter-rouge">amirpourmand/al-folio</code> Jekyll Docker image, I ran into an issue where the local site running inside the container was no longer accessible. Here’s a breakdown of how I diagnosed and resolved the problem.</p> <hr/> <h2 id="-problem">🧩 Problem</h2> <p>I ran the container with the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-p</span> 8080:8080 amirpourmand/al-folio:v0.14.4
</code></pre></div></div> <p>Accessing http://localhost:8080 in the browser resulted in a connection failure. The container was running properly and ports were mapped:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker ps
<span class="c"># PORTS: 0.0.0.0:8080-&gt;8080/tcp</span>
</code></pre></div></div> <p>However, inside the container:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker <span class="nb">exec</span> <span class="nt">-it</span> yuxuanigithubio-jekyll-1 /bin/bash
curl http://localhost:8080
<span class="c"># =&gt; curl: (7) Failed to connect to localhost port 8080</span>
</code></pre></div></div> <h2 id="-investigation">🔍 Investigation</h2> <p>Tools like <code class="language-plaintext highlighter-rouge">netstat</code> and <code class="language-plaintext highlighter-rouge">ss</code> were unavailable in the container, so I used <code class="language-plaintext highlighter-rouge">curl</code> to test the local port. <code class="language-plaintext highlighter-rouge">curl</code> failed to connect, indicating the server wasn’t running or listening on the expected port. I exited the container and checked the logs:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker logs yuxuanigithubio-jekyll-1
</code></pre></div></div> <p>The logs showed this error:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Liquid Exception: Liquid syntax error (line 84): Unknown tag 'asset_img'
in /srv/jekyll/_posts/2018-05-19-build-website-with-hexo.md
</code></pre></div></div> <h2 id="-root-cause">🎯 Root Cause</h2> <p>The <code class="language-plaintext highlighter-rouge">asset_img</code> tag is a custom tag from Hexo (since I was importing old posts into the new website). In this post, how to add an image is described, so there are lines like this <code class="language-plaintext highlighter-rouge">{% asset_img image_name.img display_name %}</code> within the article. However, Jekyll does not recognize it, since Jekyll uses Liquid syntax which will contradict with ` {% … %} ` form. As a result, the site build failed, and the service never started.</p> <h2 id="-solution">✅ Solution</h2> <p>I edited <code class="language-plaintext highlighter-rouge">_posts/2018-05-19-build-website-with-hexo.md</code> by adding <code class="language-plaintext highlighter-rouge">raw</code> and <code class="language-plaintext highlighter-rouge">endraw</code> in front of the lines where could be problematic:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% raw %}{% example code %}{% end %}
</code></pre></div></div> <p>(Simply removing the offending lines and replace with syntax compatible with Jekyll would also work but since the article is introducing hexo, I preserve the information to be displayed.)</p> <h2 id="-restart-and-verify">🔁 Restart and Verify</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker restart yuxuanigithubio-jekyll-1
docker logs yuxuanigithubio-jekyll-1
</code></pre></div></div> <p>After confirming there were no errors, I accessed <code class="language-plaintext highlighter-rouge">http://localhost:8080</code>. Everything worked as expected ✅</p> <h2 id="-conclusion">📝 Conclusion</h2> <p>Sometimes, Jekyll failures are silent within Docker—containers appear to be running, but services are not. Always check the logs, especially if you’re migrating posts from platforms like Hexo that use custom syntax.</p> <p>Hopefully this helps someone facing the same issue 🙌</p>]]></content><author><name></name></author><category term="Debug"/><category term="docker"/><category term="jekyll"/><category term="blogging"/><category term="debugging"/><summary type="html"><![CDATA[Solveing issues when importing markdown files from Hexo]]></summary></entry><entry><title type="html">Why I Blog / Why You Should Start Blogging Right Now</title><link href="https://yuxuani.github.io/blog/2024/why-blogging/" rel="alternate" type="text/html" title="Why I Blog / Why You Should Start Blogging Right Now"/><published>2024-04-15T00:00:00+00:00</published><updated>2024-04-15T00:00:00+00:00</updated><id>https://yuxuani.github.io/blog/2024/why-blogging</id><content type="html" xml:base="https://yuxuani.github.io/blog/2024/why-blogging/"><![CDATA[<p>When relaunching my website, I wondered, after such a long time of silence, what should come first as the topic. Then I decided to write this article.</p> <p>The main ideas of this post are adopted from an article written by a famous Chinese blogger, MindHacks (刘未鹏) – <em>Why you should start blogging now</em>. <a href="#reference">[1]</a> In this article, he spotlighted how beneficial it could be to keep a <em>valuable blog</em> and successfully persuaded me to write my first blog many years ago.</p> <p>Now I want to write those reasons down and let this post serve as review of his article and a reminder to help me keep in mind <strong><em>why I started blogging</em></strong> and <strong><em>what I am blogging for</em></strong>. Hopefully, just as I was influenced by MindHacks, I also wish this post could probably inspire some of you to <strong><em>start your own journey of blogging</em></strong> and enjoy the goodies that it might bring you.</p> <h2 id="benefits-of-blogging">Benefits of Blogging</h2> <p>According to MindHacks,</p> <blockquote> <p>Blogging can bring <strong>numerous benefits</strong> but <strong>no obvious downsides</strong>. In other word, using the form of a blog to <strong>record your valuable thoughts</strong> can bring many benefits without any obvious downsides. [1]</p> </blockquote> <p>In this context, blogging is not expressing random musings, trivial mood notes, idle chatter, or filling the void with words, but a result or summary of your thinking. [1] With this being said, I think you might already have get some sense of how beneficial blogging could be.</p> <p>Here I want to list <strong><em>ten main advantages</em></strong> of maintaining a long-term valuable blog, combining my understandings and ideas from the original article. [1]</p> <h3 id="1-recording-valuable-thoughts">1. Recording valuable thoughts</h3> <p>Just writing down your thoughts is beneficial. Like sparkles, if you don’t record them right away, your thoughts will disappear very quickly. You are losing the wealth of your thoughts! Not to mention, old thoughts may inspire future creations.</p> <p>The valuable records can also help with review and reflection. By reading the words you wrote long time ago you can recall the situation and observe your progress. Witnessing the growth not only helps with the self-development but also serves as a source of fulfillment.</p> <p>Furthermore, taking notes down can also help you with problem solving. With a clear record, you don’t have to solve the same problem again in the future. Everytime I encounter the same problem (especially with certain complexity) that I’ve solved years ago but didn’t record properly, I regret that I didn’t write them down! It turns out to be a waste of time and a waste of life T_T</p> <h3 id="2-fostering-better-thinking">2. Fostering better thinking</h3> <p>Blogging is more than just putting your thoughts into words. It also requires maintaining them in a structured format. This process helps you arrange your ideas, enhance mental clarity, and encourage deeper reflection. It reveals hidden patterns that might otherwise go unnoticed, bringing to light areas of ambiguity or gaps.</p> <p>If you have ever written a thesis, paper, or report, you will recognize the value of organizing your thoughts systematically to form coherent arguments. Blogging is like a mini version of that process. It promotes logical reasoning, sharpens your ability to analyze, and strengthens critical thinking over time.</p> <h3 id="3-motivating-continuous-learning-and-thinking">3. Motivating continuous learning and thinking</h3> <p>One of the unexpected benefits of blogging is how it exposes the limits of your own understanding. As you try to articulate your ideas clearly, you often stumble upon gaps in knowledge or fuzzy logic. Rather than being discouraging, these moments spark curiosity and drive you to dig deeper.</p> <p>Blogging turns passive thoughts into active questions—encouraging you to research, reflect, and refine. The more you write, the more you realize how much there is to explore, and this ongoing cycle of expression and inquiry fuels a habit of lifelong learning. In this way, each post becomes not just a record of what you know, but a doorway to what you’re about to discover.</p> <h3 id="4-learning-to-keep-consistency">4. Learning to keep consistency</h3> <p>We are human. Staying consistent is hard. However, maintaining a blog, even at a slower pace, teaches the value of showing up over time. Whether you’re writing weekly, monthly, or just when inspiration strikes, the act of sticking with something positive creates momentum. It builds discipline, patience, and a quite sense of progress in the long run. And that kind of long-term commitment is definitely something that you can be proud of.</p> <p>Moreover, in the world of information exploration, knowledge often comes in scattered pieces, making patience essential. By consistently blogging, you learn to sift through and organize these fragmented insights, turning them into something meaningful. This practice helps you stay focused and disciplined as you navigate through vast amounts of information.</p> <h3 id="5-teaching-is-the-best-way-to-learn">5. Teaching is the best way to learn</h3> <p>Have you ever heard of the Feynman Technique? It’s a method that emphasizes the power of teaching as a learning tool — if you can explain a concept clearly and simply, it means you truly understand it. Blogging works in much the same way. When you try to communicate an idea to an audience that may not share your background or expertise, you’re forced to confront the fuzzy parts in your own understanding.</p> <p>Writing about complex topics in a way that others can grasp requires you to break things down, reframe them, and often revisit the basics. This process not only strengthens your grasp of the subject but also reveals any weak spots in your knowledge. In essence, teaching others through blogging reinforces your own understanding — often multiplying what you learn many times over.</p> <h3 id="6-enhancing-reusability-of-information">6. Enhancing reusability of information</h3> <p>Blogging significantly enhances the reusability of information, as Mindhacks wisely points out. The ability to create content that can be reused, shared, and referenced repeatedly is incredibly powerful. When you blog, you’re not simply capturing your thoughts for a one-time use — you’re creating content that can be accessed again and again. Once published, your ideas transcend time and location, becoming available to anyone, anywhere in the world.</p> <p>This means that rather than having to explain the same thing over and over, you can simply point others to your blog post. Over time, this reduces your workload and boosts your efficiency in sharing information. It’s like building a personal reference library that others can tap into, making learning and communication more streamlined and effective in the long run.</p> <h3 id="7-discussion-promotes-deeper-reflection">7. Discussion promotes deeper reflection</h3> <p>When you focus on a specific topic, you’re engaging with a targeted group of people who share an interest in that area. These readers may have questions — some you can easily answer, while others may challenge your understanding. This interaction encourages you to think more deeply, as you’re constantly re-evaluating and refining your thoughts.</p> <p>Additionally, you can learn a lot from your audience. They might point out mistakes you hadn’t noticed, offer helpful advice, or spark new ideas that hadn’t crossed your mind. Through this ongoing exchange, the discussion fosters not only a greater understanding of the subject but also enhances your own learning and growth.</p> <p>In this way, it’s a win-win situation for both you and your audience — while you gain new perspectives and refine your knowledge, your audience benefits from the insights you share, making it a dynamic and enriching process for everyone involved.</p> <h3 id="8-finding-like-minded-friends">8. Finding like-minded friends</h3> <p>Blogging connects people through shared values and thoughts. MindHacks touched on this idea too — it’s not just about broadcasting, it’s about creating a space where others who resonate with you can find you.</p> <p>Many people try to make friends online, but it’s often hard to find those who truly share your values—especially through shallow social media chatter. Blogging, on the other hand, naturally attracts like-minded individuals. When you share thoughtful content, you not only express your ideas but also invite deeper connection. Over time, a meaningful blog becomes a magnet for those who resonate with your beliefs.</p> <p>Moreover, unlike traditional friendships that start with small talk and take time to build, blogging breaks geographical barriers and lets your ideas speak for you — saving time and creating stronger, more authentic bonds.</p> <h3 id="9-a-resume-to-the-world">9. A “resume” to the world</h3> <p>As you connect with like-minded individuals, your blog not only fosters deeper relationships but also becomes a living resume, reflecting your values, beliefs, and professional identity.</p> <p>Unlike traditional resumes that list jobs and qualifications, blogging offers a window into who you are and what you care about, without having to repeatedly explain yourself. This openness invites meaningful connections and unexpected opportunities, as people who resonate with your ideas naturally gravitate toward you. In short, your blog quietly represents you to the world.</p> <h3 id="10-improving-writing-skills-and-extra">10. Improving writing skills and extra</h3> <p>Last but not least, though MindHacks didn’t mention, don’t forget: blogging helps you improve your writing. Writing is a skill that requires practice. The more you write, the faster you become, and the better the quality of your work. Blogging helps you learn to convey your ideas in a more logical and effective way, refining your ability to express yourself clearly.</p> <p>And if you’re writing in a foreign language, there’s an extra bonus — you’re not just improving your writing, but also practicing the language. Unlike boring writing exercises, blogging allows you to discuss topics you care about and express your thoughts in the new language you’re learning. Plus, nowadays, you can even use assistants like ChatGPT to help with your writing. In doing so, you may learn new phrases and expressions, which can enhance your vocabulary and improve your writing style.</p> <p><strong>OK! With so many benefits in mind, let’s start blogging! Wait… wait a minute, I’ve heard there are many stones in the way?</strong></p> <h2 id="get-stones-out-of-the-way">Get Stones out of the way</h2> <p>In the original Mindhacks article, he also listed some common stones — those familiar excuses we all know too well. Let’s name them and move them aside.</p> <p><strong>Stone 1: What if I don’t know what to write?</strong><br/> If you keep thinking and learning, questions will naturally come up. Just record your thoughts—it’s all part of the process.</p> <p><strong>Stone 2: What if my thoughts are naive or not valuable?</strong><br/> If it’s valuable to you, it can be valuable to someone like you. Don’t underestimate that.</p> <p><strong>Stone 3: What if I get something wrong and “real specialists” laugh at me?</strong><br/> Real specialists don’t attack people. And if someone does? They’re not worth your time — just walk away.</p> <p><strong>Stone 4: What if someone points out my mistake?</strong><br/> Congrats! You just learned faster. Stay open —- it’s how you grow.</p> <p><strong>Stone 5: What if I run out of ideas?</strong><br/> Ideas come from living, learning, and noticing. Keep feeding your mind and ideas will follow.</p> <p><strong>Stone 6: What if there’s no reward?</strong><br/> Sometimes, writing is the reward. Even with no audience, the clarity you gain is priceless.</p> <p><strong>Stone X: What if …</strong><br/> Move the stone aside and just do it.</p> <p>It’s always easier said than done —- but solutions exist: Learn, think, and record. Make a time schedue and build a habit. (Hint: <em>Atomic Habits</em> is a great guide.)</p> <p>Ready to go? I’d love to hear from you. Drop a comment if this helped — thanks for reading! 🙌</p> <h2 id="reference">Reference</h2> <p>[1] <a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/">刘未鹏：为什么你应该（从现在开始就）写博客</a>（Update April 13, 2025: This site is no longer available, but the name turns up many reposts online.）</p>]]></content><author><name></name></author><category term="Highlights"/><category term="Essays"/><category term="blogging"/><category term="thoughts"/><summary type="html"><![CDATA[Benefits of blogging and common obstacles]]></summary></entry><entry><title type="html">如何克服完美主义? (1)</title><link href="https://yuxuani.github.io/blog/2023/perfectionism-1/" rel="alternate" type="text/html" title="如何克服完美主义? (1)"/><published>2023-10-10T19:02:18+00:00</published><updated>2023-10-10T19:02:18+00:00</updated><id>https://yuxuani.github.io/blog/2023/perfectionism-1</id><content type="html" xml:base="https://yuxuani.github.io/blog/2023/perfectionism-1/"><![CDATA[<p>很多人（包括笔者）都受困于完美主义并且想要改进，以下是对于完美主义的一些思考。如果你和我一样，不妨一起来看看吧。</p> <h2 id="完美主义高期望的通常表现">完美主义、高期望的通常表现</h2> <ul> <li>希望所有事情都在控制之下</li> <li>一切都想要尽可能的好</li> <li>没有达到标准就苛责自己</li> <li>太过在乎自己在别人眼中的形象</li> </ul> <h2 id="从中可以得到什么好处-but">从中可以得到什么好处？&amp; But</h2> <ul> <li>高标准带来高水平表现、甚至超水平表现（but 完成度有时候更重要，尤其是当完美主义已经影响到效率的时候，未必能有更好的结果）</li> <li>注意别人的情绪也许可以树立良好形象、可能减少或避免负面影响 (but 其实每个人都是以自我为中心，别人并不会在乎那么多，即使出现什么误会或者不良后果也可以事后沟通，并且很多时候以结果说话，不需要和太多人产生情感链接，况且即使关注别人也未必能取得好结果，以他人为中心是很累的)</li> <li>设置一个高目标，即使完成一部分也已经有很好的结果 （but 为什么不设置一个相对合理的目标呢，了解与调整一个目标比完全设置一个达不到的目标更有满足感，也更容易规划未来，形成正向反馈）</li> <li>享受规整、对称～“完美”的感觉 （but 没有最完美，只有更完美，过分追求可能会使自己苦恼，容易浪费时间在细枝末节上，也容易着眼于缺陷而忽视真正的美，其实留下“黑历史”并看到自己的进步可能也是另一种享受）&lt;- 比如这篇文章？</li> </ul> <h2 id="可能造成的不良后果">可能造成的不良后果？</h2> <ul> <li>过分要求完美导致效率降低</li> <li>过分在乎别人导致压力增加</li> <li>过分在乎结果导致体验感下降</li> <li>恐惧感妨碍行动</li> <li>失去宝贵试错经验</li> <li>容易着眼于缺陷而忽视优点</li> </ul> <h2 id="完美主义特质哪些可以留下哪些需要摒弃">（完美主义特质）哪些可以留下，哪些需要摒弃？</h2> <ul> <li>完成基本框架以后的检查、完善工作可以“完美主义”一些</li> <li>在不影响工作和心态的前提下，美学上的完美主义可以适当保留，可以享受，但不要苛责</li> </ul> <h2 id="如何利用完美主义特质">如何利用完美主义特质？</h2> <p>todo~这也许是一个有趣的话题</p> <h2 id="可能是怎么形成习得的">可能是怎么形成/习得的?</h2> <p>todo~以后再讨论</p> <h2 id="对抗完美主义的rules-of-thumb">对抗完美主义的“Rules of Thumb”</h2> <ul> <li>just do it 马上行动，拒绝拖延</li> <li>finish first 先完成，再完美</li> <li>80/20 rule everywhere 注意二八原则</li> <li>permission to be human 不苛责，不难过，世间总有不完美</li> <li>eyes that find beauty 发现美的眼睛，不完美也可以很美，不要总是聚焦在缺陷上</li> <li>let it go 放手吧放手</li> </ul> <h2 id="有哪些具体措施--以后再详谈">有哪些具体措施？&lt;- 以后再详谈</h2> <ul> <li>staged objectives 阶段目标</li> <li>concrete tasks 具体事项</li> <li>clear priorities 明确优先级</li> <li>measurable criteria 可测量的标准</li> <li>a definite deadline 设定期限</li> <li>a suitable schedule 合适的计划表</li> <li>regular review 定期复盘，调整目标，改善计划</li> <li>archive and stop 归档并放手，达到标准就“交付”</li> <li>learn from others 看看别人是怎么做的，可以向那些没有完美主义倾向的人学习</li> </ul> <h2 id="辅助工具方法">辅助工具/方法</h2> <ul> <li>pomodoro technique 番茄工作法</li> <li>GTD (Get Things Done) methodology</li> <li>more?</li> </ul> <p>这是我关于完美主义的“cheat sheet”, 你有什么好主意呢？欢迎留言！</p>]]></content><author><name></name></author><category term="中文"/><category term="随笔"/><category term="cheat sheet"/><summary type="html"><![CDATA[How to overcome perfectionism]]></summary></entry><entry><title type="html">Python for Data Science: Loop</title><link href="https://yuxuani.github.io/blog/2018/python-for-data-science-loop/" rel="alternate" type="text/html" title="Python for Data Science: Loop"/><published>2018-10-01T00:46:43+00:00</published><updated>2018-10-01T00:46:43+00:00</updated><id>https://yuxuani.github.io/blog/2018/python-for-data-science-loop</id><content type="html" xml:base="https://yuxuani.github.io/blog/2018/python-for-data-science-loop/"><![CDATA[<h2 id="while-loop">While loop</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>while condition :
  expression
# loop while the condition is true
</code></pre></div></div> <h2 id="for-loop">For loop</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># basic for loop
for a in list:
  expression

# access to index
for index, a in enumerate(list):
  expression

# stings
</code></pre></div></div> <h2 id="looping-data-structures">Looping data structures</h2> <p>dict, numpy array, pandas</p> <h3 id="dictionary">Dictionary</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for key, value in dict.items():
  print(key + "--" + str(value))
</code></pre></div></div> <h3 id="numpy-array">Numpy array</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for a in my_array:
  print(a)
# for 1D numpy array elements will be printed out one by one
# for 2D numpy array arrays will be printed out one by one

for a in np.nditer(my_array):
  print(a)
# elements will be printed out one by one
# notice that np.nditer() is a function, while dict.items is a method
</code></pre></div></div> <h3 id="pandas">Pandas</h3> <ul> <li>By default</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import pandas as pd
my_data = pd.read_csv("my_data", index_col = 0)
for a in my_data:
  print(a)
# column names will be printed out.
</code></pre></div></div> <ul> <li>iterrows</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for label,row in my_data.iterrows():
  print(label)
  print(row)
# selective print, use row[index], or loc, iloc
</code></pre></div></div> <ul> <li>add column <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># for example
for lab, row in my_data.iterrows()：
my_data[lab, "new_column"] = my_data["column1"].upper()
</code></pre></div> </div> </li> <li>apply <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># for example
cars['COUNTRY'] = cars['country'].apply(str.upper)
cars['COUNTRY'] = cars['country'].apply(len)
</code></pre></div> </div> </li> </ul> <h2 id="reference">Reference</h2> <p><a href="https://www.datacamp.com/courses/intermediate-python-for-data-science">1. Datacamp: Intermediate Python for Data Science</a></p>]]></content><author><name></name></author><category term="Notes"/><category term="python"/><category term="data science"/><category term="cheat sheet"/><summary type="html"><![CDATA[Datacamp notes -- loop]]></summary></entry><entry><title type="html">Build up Your Own Website with Hexo</title><link href="https://yuxuani.github.io/blog/2018/build-website-with-hexo/" rel="alternate" type="text/html" title="Build up Your Own Website with Hexo"/><published>2018-05-19T15:44:43+00:00</published><updated>2018-05-19T15:44:43+00:00</updated><id>https://yuxuani.github.io/blog/2018/build-website-with-hexo</id><content type="html" xml:base="https://yuxuani.github.io/blog/2018/build-website-with-hexo/"><![CDATA[<p>How to get started with Hexo?</p> <h2 id="install-git-and-nodejs">Install Git and Node.js</h2> <p>First, install <a href="https://git-scm.com/">Git</a> and <a href="https://nodejs.org/en/">Node.js</a>. You can check if they are successfully installed by tying the following commands.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git version
node <span class="nt">-v</span>
</code></pre></div></div> <h2 id="install-hexo">Install Hexo</h2> <p>Type in the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install </span>hexo-cli <span class="nt">-g</span>
</code></pre></div></div> <p>For version checking, you may type in</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hexo <span class="nt">-v</span>
</code></pre></div></div> <h2 id="create-your-website">Create your website</h2> <ul> <li>Type in <code class="language-plaintext highlighter-rouge">hexo init website_name</code> and Hexo will generate a template for you.</li> <li><code class="language-plaintext highlighter-rouge">cd</code> to the folder you just created</li> <li>run <code class="language-plaintext highlighter-rouge">hexo server</code> and you can see the site in the localhost.</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hexo init website_name
<span class="nb">cd </span>website_name
hexo server <span class="c"># alternatively hexo s</span>
</code></pre></div></div> <h2 id="customize-your-website">Customize your website</h2> <p>Some basics:</p> <h3 id="configuration">Configuration</h3> <ul> <li>Go to the folder and configurate the <code class="language-plaintext highlighter-rouge">_config.yml</code> file.</li> <li>In the <code class="language-plaintext highlighter-rouge">source</code> folder, there is a folder called <code class="language-plaintext highlighter-rouge">_posts</code>. That is where you can put your posts.</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hexo new post_name <span class="c"># create a new post</span>
hexo new draft draft_name <span class="c"># create a draft</span>
hexo server <span class="nt">--draft</span> <span class="c"># show the draft</span>
hexo publish draft_name <span class="c"># post the draft</span>
hexo new page page_name <span class="c"># create a new page</span>
</code></pre></div></div> <h3 id="modification-of-front-matter">Modification of Front Matter</h3> <p>Your can modify your page or posts by just modifying the <strong>front matter</strong>. (see <a href="https://hexo.io/docs/front-matter.html">Hexodocs: Front Matter</a>. ) Here is an example of sorting your posts by adding tags and categories.</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">Post's title</span>
<span class="na">date</span><span class="pi">:</span> <span class="s">2018-05-19 13:54:51</span>
<span class="na">tags</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">Tag1</span><span class="pi">,</span> <span class="nv">Tag2</span><span class="pi">,</span> <span class="nv">Tag3</span><span class="pi">]</span>
<span class="na">categories</span><span class="pi">:</span>
<span class="pi">-</span> <span class="pi">[</span><span class="nv">Cat1</span><span class="pi">,</span> <span class="nv">Cat1.1</span><span class="pi">]</span>
<span class="pi">-</span> <span class="pi">[</span><span class="nv">Cat2</span><span class="pi">]</span>
<span class="pi">-</span> <span class="pi">[</span><span class="nv">Cat3</span><span class="pi">]</span>
<span class="nn">---</span>
</code></pre></div></div> <p><strong>Now you’re running your website, but you can do more to make your site to look like exactly what you want.</strong></p> <h2 id="furthermore">Furthermore</h2> <p>More things you can do with hexo:</p> <h3 id="change-the-theme">Change the theme</h3> <p>With Hexo, you are able to change the theme without changing your content files. To change it, you may</p> <ul> <li>go to the <a href="https://hexo.io/themes/index.html">official site</a> and select a theme</li> <li>go to git, read the <code class="language-plaintext highlighter-rouge">README</code> file and see the features to decide whether to take it</li> <li>clone it from the git <code class="language-plaintext highlighter-rouge">git clone https://... themes/theme_name</code></li> <li>change the theme in the <code class="language-plaintext highlighter-rouge">_config.yml</code> file</li> <li>restart your host and you can see the new theme</li> </ul> <h3 id="asset-folders">Asset-folders</h3> <p>An asset-folder is a folder to store the file that you want to display or let the reader downloading. You can</p> <ul> <li>go to <code class="language-plaintext highlighter-rouge">_config.yml</code> file</li> <li>set <code class="language-plaintext highlighter-rouge">post_asset_folder: true</code> and save</li> <li>when you create a new post, an <code class="language-plaintext highlighter-rouge">assetfolder</code> will be generated at the same time</li> <li>put the file into the folder</li> <li>write the code in the content</li> </ul> <p>Example: adding an image</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% asset_img image_name.img display_name %}
{% asset_link image_name %}
{% asset_path image_name %}
</code></pre></div></div> <h3 id="plugins">Plugins</h3> <p>See https://hexo.io/plugins/</p> <p>Examples:</p> <ul> <li>add codeblock</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% codeblock lang=python %}
print('Hello World')
{% endcodeblock %}
</code></pre></div></div> <ul> <li>add youtube video</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% youtube YouTubeID=xxxxxx %}
</code></pre></div></div> <p><strong>Actually you can do a lot more with Hexo. You may want to characterize your website or even create your own theme. To go deeper, reading the <a href="https://hexo.io/docs/index.html">documentation</a> on the official website is neccessary. Plus, to get started, there is a series of <a href="https://www.youtube.com/watch?v=Kt7u5kr_P5o&amp;list=PLLAZ4kZ9dFpOMJR6D25ishrSedvsguVSm&amp;index=1">tutorial videos</a> provided by Mike from <a href="http://www.giraffeacademy.com/">Giraffe Academy</a>, which is very helpful. Hope that you can enjoy it!</strong></p> <h2 id="references">References</h2> <p><a href="https://hexo.io/docs/index.html">Hexodocs</a> <a href="https://www.youtube.com/watch?v=Kt7u5kr_P5o&amp;list=PLLAZ4kZ9dFpOMJR6D25ishrSedvsguVSm&amp;index=1">Hexo Tutorial by Mike</a></p>]]></content><author><name></name></author><category term="Web"/><category term="hexo"/><category term="blogging"/><summary type="html"><![CDATA[Get started with hexo]]></summary></entry></feed>